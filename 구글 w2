import numpy as np
a=np.array([1,2,3,4])
print(a)

import time #시간 얼마나 걸리는지
a=np.random.rand(100000)
b=np.random.rand(100000)

tic=time.time()
c=np.dot(a,b)
toc=time.time()

print(c)
print('vectorized version'+str(1000*(toc-tic))+'ms')
 
#non-vec
c=0
tic=time.time()
for i in range(100000):
    c+=a[i]*b[i]
toc=time.time()

print('for loop'+str(1000*(toc-tic))+'ms')    


  
import numpy as np

A=np.array([[56.0,0.0,4.4,68.0],[1.2,104.0,52.0,8.0],[1.8,135.0,99.0,0.9]])

print(A)

cal=A.sum(axis=0)  #axis=0 세로로 더하기위한  axis=1가로

print(cal)
percentage=100*A/cal.reshape(1,4) #파이썬 broadcasting 3,4매트릭스를 1,4로 나눈다
print(percentage)

import numpy as np

a=np.random.randn(5) #임의의 개수 (1,5)
print(a)

print(a.shape) 

print(a.T)

print(np.dot(a,a.T))

print(np.random.randn(5,1))
print(a)
print(a.T)
print(np.dot(a,a.T))

 
#sigmoid

import math

def basic_sigmoid(x):
    s=1/(1+math.exp(-x))
    return s
print(basic_sigmoid(3))

import numpy as np
x=np.array([1,2,3]) #array는 숫자를 스스로 넣어주는 역할을 한다.
print(np.exp(x)) #np.exp는 e함수를 나타내준다.


import numpy as np

def sigmoid(x):
    s=1/(1+np.exp(-x))
    return s

x=np.array([1,2,3])
print(sigmoid(x))

import numpy as np
#sigmoid_derivative(x)=σ′(x)=σ(x)(1−σ(x))
def sigmoid_derivative(x):
    s=1/(1+np.exp(-x))
    ds=s*(1-s)#σ′
    return ds
x=np.array([1,2,3])
print(sigmoid_derivative(x))


import numpy as np
def image2vector(image):
    v=image.reshape((image.shape[0]*image.shape[1]*image.shape[2],1))
    return v
image=np.array([[[ 0.67826139,  0.29380381],
        [ 0.90714982,  0.52835647],
        [ 0.4215251 ,  0.45017551]],

       [[ 0.92814219,  0.96677647],
        [ 0.85304703,  0.52351845],
        [ 0.19981397,  0.27417313]],

       [[ 0.60659855,  0.00533165],
        [ 0.10820313,  0.49978937],
        [ 0.34144279,  0.94630077]]])
print(image2vector(image))

import numpy as np
def normalizeRows(x):
    x_norm=np.linalg.norm(x,ord=2,axis=1,keepdims=True) #||x|| axis=1 행(row) ord=2 놈2
    x=x/x_norm 
    return x    

x=np.array([[0,3,4],
            [1,6,4]])

print(normalizeRows(x))

import numpy as np
def softmax(x):
    s=np.exp(x)
    s1=np.sum(s,axis=1,keepdims=True) #sigma exp 가로로 곱합
    s2=s/s1
    return s2

x=np.array([[1,2,3],[4,5,6]]) #axis가 1이면 배열을 2개 이상으로 처리한다.
print(softmax(x))   

import time
import numpy as np
#vectorize
x1=[9,2,5,0,0,7,5,0,0,0,9,2,5,0,0]
x2 = [9, 2, 2, 9, 0, 9, 2, 5, 0, 0, 9, 2, 5, 0, 0]

#벡터 실행의 원본곱
tic=time.process_time()#시간
dot=0
for i in range(len(x1)):
    dot+=x1[i]*x2[i]
toc=time.process_time()
print('dot'+str(dot)+'\n----'+str(100*(toc-tic))+'ms')

tic=time.process_time()
outer=np.zeros((len(x1),len(x2)))
for i in range(len(x1)):
    for j in range(len(x2)):
        outer[i,j]=x1[i]*x2[j]
toc=time.process_time() 
print ("outer = " + str(outer) + "\n ----- Computation time = " + str(1000*(toc - tic)) + "ms")

tic=time.process_time()
mul=np.zeros(len(x1))
for i in range(len(x1)):
    mul[i]=x1[i]*x2[i]
toc=time.process_time()
print ("elementwise multiplication = " + str(mul) + "\n ----- Computation time = " + str(1000*(toc - tic)) + "ms")    

W=np.random.rand(3,len(x1))
tic=time.process_time()
gdot=np.zeros(W.shape[0])
for i in range(W.shape[0]):
    for j in range(len(x1)):
        gdot[i]+=W[i,j]*x1[j]
toc=time.process_time()
print('gdot'+str(gdot)+'\n----'+str(1000*(toc-tic))+'ms') 

import time
import numpy as np
x1 = [9, 2, 5, 0, 0, 7, 5, 0, 0, 0, 9, 2, 5, 0, 0]
x2 = [9, 2, 2, 9, 0, 9, 2, 5, 0, 0, 9, 2, 5, 0, 0]
### VECTORIZED DOT PRODUCT OF VECTORS ###
tic=time.process_time()
dot=np.dot(x1,x2) #dot곱셉
toc=time.process_time()
print('dot='+str(dot)+'\n----------'+str(1000*(toc-tic))+'ms')
### VECTORIZED OUTER PRODUCT ###
tic=time.process_time()
outer=np.outer(x1,x2)
toc=time.process_time()
print ("outer = " + str(outer) + "\n ----- Computation time = " + str(1000*(toc - tic)) + "ms")
### VECTORIZED ELEMENTWISE MULTIPLICATION ###
tic=time.process_time()
mul=np.multiply(x1,x2)
toc=time.process_time()
print ("outer = " + str(mul) + "\n ----- Computation time = " + str(1000*(toc - tic)) + "ms")
### VECTORIZED GENERAL DOT PRODUCT ###
tic=time.process_time()
W=np.random.rand(3,len(x1))
dot=np.dot(W,x1)
toc=time.process_time()
print ("outer = " + str(dot) + "\n ----- Computation time = " + str(1000*(toc - tic)) + "ms")

#로스(y-hat,y)=시그마 |y^i-y_hat^i|
import numpy as np
def L1(yhat,y):
    loss=np.sum(np.abs(yhat-y),axis=0)
    return loss
yhat=np.array([.9,0.2,0.1,.4,.9])
y=np.array([1,0,0,1,1,])
print(L1(yhat,y))

def L2(yhat,y):
    loss=np.dot(np.abs(yhat-y),np.abs(yhat-y)) #np.dot(x,x)=x^2
    return loss
yhat=np.array([.9,0.2,0.1,.4,.9])
y=np.array([1,0,0,1,1,])
print(L2(yhat,y))
