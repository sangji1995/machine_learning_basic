import pandas as pd
# 붓꽃 데이터 불러오기
df=pd.read_csv('https://archive.ics.uci.edu/ml/''machine-learning-databases/iris/iris.data',header=None)
df.tail() #데이터 끝부분만 출력

import matplotlib.pyplot as plt
import numpy as np
X=df.iloc[0:100,[0,2]].values #앞 100개 샘플의 컬럼0(꽃받침 길이)과 컬럼2(꽃잎 길이) 값을 가지고 옴

#산점도를 그립니다. x축:컬럼0(꽃받침 길이), y축:컬럼1(꽃잎 길이)
plt.scatter(X[:50,0],X[:50,1],color='red', marker='o',label='setosa') #setosa에 해당하는 샘플(0~49) 플롯팅
plt.scatter(X[50:100,0],X[50:100,1],color='blue', marker='x',label='versicolor') #setosa에 해당하는 샘플(50~99) 플롯팅

#그래프 텍스트 설정
plt.xlabel('Sepal length[cm]')
plt.ylabel('petal length[cm]')
plt.legend(loc='upper left')
plt.show()
#class 퍼셉트론
class Perceptron(object):
    def __init__(self, lr=0.01, n_iter=50, random_state=1): #n_iter 학습업데이트
        self.lr=lr #learning rate (학습률,0.0~1.0)
        self.n_iter=n_iter #훈련 데이터셋 반복 횟수
        self.random_state=random_state #난수발생기 시드
    #입력값에 대해 정답 추론
    def predict(self,X):
        output =np.dot(X,self.w_[1:])+self.w_[0]
        return np.where(output>=0.0,1,-1) #출력값이 0 이상이면 1, 아니면 -1을 리턴함
    
    def fit(self,X,y): #업데이트 할거 
        #x:학습 데이터
        #y: 정답값(레이블)
        regn=np.random.RandomState(self.random_state)
        self.w_=regn.normal(loc=0.0, scale=0.01, size=1 +X.shape[1]) #가중치 랜덤 초기화
        self.errors_=[] #에포크마다 누적된 분류 오류 
        
        for _ in range(self.n_iter): #지정한 회수(n_iter)만큼 반복
            errors=0
            for xi, target in zip(X,y): #각 샘플에 대해 반복
                update =self.lr *(target -self.predict(xi))
                self.w_[1:]+=update*xi #가중치 업데이트
                self.w_[0]+=update #바이어스 업데이트
                errors +=int(update !=0.0) #에러 게산
            self.errors_.append(errors)
        return self
    
#퍼셉트론 객체 생성
ppn= Perceptron(lr=0.1, n_iter=10)

#setosa와 versicolor를 선택
y=df.iloc[0:100,4].values
y=np.where(y =='iris-setosa',-1,1)

#학습 실행
#x:앞 100개 샘플의 컬럼0(꽃받침 길이)과 컬럼2(꽃잎 길이) 값, 앞 셀에서 'X=df.iloc[0:100,[0,2]].values로 생성
#y: 앞 100개 샘플의 정답값 (꽃종류). -1 이면 setosa, 1이면 veriscolor.
ppn.fit(X,y)

plt.plot(range(1,len(ppn.errors_)+1),ppn.errors_,marker='o')
plt.xlabel('Epoches')
plt.ylabel('NUmber of errors')
plt.show()
